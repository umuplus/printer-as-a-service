#!/usr/bin/env node

'use strict';

require('dotenv').config();

const { Client: DotBee } = require('dot-bee');
const Configuration = require('../lib/config');
const fs = require('fs');
const { createInterface: lineReader } = require('readline');
const i18n = require('i18n');
const IPP_Printer = require('ipp-printer');
const is = require('is_js');
const isGZIP = require('is-gzip');
const locales = [ 'tr', 'en' ];
const mongoose = require('../models');
const shortid = require('shortid');
const timeTravel = require('date-fns/add_hours');
const zlib = require('zlib');

const JobModel = mongoose.model('Job');
const UserModel = mongoose.model('User');

const bee = new DotBee();
bee.acceptServices([ 'spool' ]);

class VirtualPrinter {
    static _isGZIP(file) {
        try {
            return fs.existsSync(file) && isGZIP(fs.readFileSync(file));
        } catch (e) {
            return false;
        }
    }

    static _unzip(ps) {
        return new Promise((resolve, reject) => {
            const archive = `${ ps }.gz`;
            try {
                fs.renameSync(ps, archive);
                const dest = fs.createWriteStream(ps);
                fs.createReadStream(archive).pipe(zlib.createGunzip()).pipe(dest);
                dest.on('close', () => {
                    if (fs.existsSync(archive)) fs.unlinkSync(archive);
                    resolve();
                });
            } catch (e) {
                if (fs.existsSync(archive)) fs.unlinkSync(archive);
                reject(e);
            }
        });
    }

    static _parse(ps) {
        return new Promise((resolve, reject) => {
            const lineHolder = lineReader({ input: fs.createReadStream(ps) }), data = {};
            lineHolder.on('line', async line => {
                if (is.string(line) && is.not.empty(line)) {
                    if (!line.startsWith('%%') && !line.startsWith('@PJL') && line.includes('featurebegin{<<')) return;

                    try {
                        if (line.includes('Pages:')) {
                            const value = parseInt(line.split('Pages:')[1]);
                            if (is.number(value)) data.pages = value;
                        } else if (line.includes('NumCopies:')) {
                            const value = parseInt(line.split('NumCopies:')[1]);
                            if (is.number(value)) data.copies = value;
                        } else if (line.includes('TargetDevice:')) {
                            const value = line.split('TargetDevice:')[1];
                            if (is.string(value)) data.driver = value.replace('(', '').replace(')', '').trim();
                        } else if (line.startsWith('%%Orientation:')) {
                            const value = line.split('Orientation:')[1];
                            if (is.string(value)) data.orientation = value.trim();
                        } else if (line.includes('BeginFeature:')) {
                            if (line.includes('*Collate')) {
                                const value = line.split('*Collate')[1];
                                if (is.string(value)) data.collate = value.trim();
                            } else if (line.includes('*Duplex')) { // None, DuplexNoTumble, DuplexTumble
                                const value = line.split('*Duplex')[1];
                                if (is.string(value)) data.duplex = value.trim();
                            } else if (line.includes('*InputSlot')) { // Tray1
                                const value = line.split('*InputSlot')[1];
                                if (is.string(value)) data.tray = value.trim();
                            } else if (line.includes('*PageSize')) { // A4
                                const value = line.split('*PageSize')[1];
                                if (is.string(value)) data.paper = value.trim();
                            } else if (line.includes('*StapleLocation')) { // None
                                const value = line.split('*StapleLocation')[1];
                                if (is.string(value)) data.staple = value.trim();
                            }
                        } else if (line.includes('BeginNonPPDFeature:')) {
                            if (line.includes('NumCopies')) {
                                const value = parseInt(line.split('NumCopies')[1]);
                                if (is.number(value)) data.copies = value;
                            }
                        } else if (line.includes('featurebegin{<<')) {
                            if (line.includes('/Collate')) {
                                let value = line.split('/Collate')[1];
                                if (is.string(value)) {
                                    value = value.split('>>')[0].trim();
                                    if (is.not.empty(value)) data.collate = value;
                                }
                            } else if (line.includes('/MediaPosition')) {
                                let value = line.split('/MediaPosition')[1];
                                if (value.length >= 2) {
                                    value = parseInt(value.split('/TraySwitch')[0].trim());
                                    if (is.number(value) && value >= 0) data.tray = `Tray${ value + 1 }`;
                                }
                            } else if (line.includes('/ProcessColorModel')) data.color = line.includes('/DeviceCMYK');
                        }
                    } catch (e) {
                        console.log(e.message);
                    }
                }
            });
            lineHolder.on('error', e => reject(e));
            lineHolder.on('close', () => resolve(data));
        });
    }

    static accept(printer, spool, document) {
        const filename = `doc-${ document.id }-${ shortid.generate() }`;
        const ps = `${ spool }/${ filename }.ps`;
        let username, name;
        document.pipe(fs.createWriteStream(ps));
        document.on('error', console.log);
        document.on('cancel', console.log);
        document.on('abort', console.log);
        document.on('end', async () => {
            try {
                document.cancel();
                username = document.userName || document.username, name = document.name || '-';
                if (name.includes(' - ')) {
                    name = name.split(' - ');
                    name.shift();
                    name = name.join(' - ');
                }
                const file = fs.statSync(ps);
                if (printer.file_size && file.size > printer.file_size)
                    throw new Error(`OVERSIZED_FILE: ~${ (file.size / 1024 / 1024).toFixed(2) } mb`);

                const data = { id: document.id };
                for (let attr of document.attributes()) {
                    if (attr.name === 'attributes-charset') data.charset = attr.value;
                    else if (attr.name === 'attributes-natural-language') data.language = attr.value;
                    else if (attr.name === 'job-originating-user-name') username = attr.value;
                }
                if (VirtualPrinter._isGZIP(ps)) await VirtualPrinter._unzip(ps);
                const properties = await VirtualPrinter._parse(ps);
                if (printer.driver && properties.driver && printer.driver !== properties.driver)
                    throw new Error(`INVALID DRIVER: ${ properties.driver }`);

                let user = await UserModel.single({ username });
                if (user && user.deleted) throw new Error(`USER_SUSPENDED: ${ user.username }`);
                else if (!user) {
                    user = new UserModel({ username, name: username, password: '-' });
                    user.updatePassword(shortid.generate());
                }
                user.login = Date.now();
                await user.save();

                const job = new JobModel({ name, user: user._id });
                job.options = data;
                for (let field in properties)
                    if (is.undefined(job.options[field])) job.options[field] = properties[field];
                job.markModified('options');
                await job.save();
                fs.renameSync(ps, `${ spool }/${ job.id }.ps`);
                await bee.forward('spool', 'archive', { id: job.id }); // TODO: backoff policy?!
                if (is.number(printer.expire) && printer.expire > 0)
                    await bee.forward('spool', 'expire', { id: job.id }, {
                        delayUntil: timeTravel(new Date(), printer.expire), printed: !printer.expirePrinted
                    });
                if (is.number(printer.expirePrinted) && printer.expirePrinted > 0)
                    await bee.forward('spool', 'expire', { id: job.id, printed: true }, {
                        delayUntil: timeTravel(new Date(), printer.expirePrinted)
                    });
            } catch (e) {
                console.log(e.message);
                if (fs.existsSync(ps)) fs.unlinkSync(ps); // TODO: notify the owner about error
            }
        });
    }

    async start() {
        this._sys = await Configuration.system({});
        if (!locales.includes(this._sys.lang)) this._sys.lang = 'en';
        i18n.configure({ locales, updateFiles: false, objectNotation: true, directory: `${ __dirname }/../i18n/printer` });

        this._printer = await Configuration.printer({});
        if (!this._printer.folder || !fs.existsSync(this._printer.folder) || fs.accessSync(this._printer.folder, fs.constants.W_OK))
            throw new Error(i18n.__('folder'));

        if (!this._printer.folder.endsWith('/')) this._printer.folder = `${ this._printer.folder }/`;
        this._spool = `${ this._printer.folder }spool`;
        this._tmp = `${ this._printer.folder }tmp`;
        if (!fs.existsSync(this._spool)) fs.mkdirSync(this._spool);
        if (!fs.existsSync(this._tmp)) fs.mkdirSync(this._tmp);

        // ? think about starting multiple instances in cluster mode for large deployments
        // * https://github.com/watson/ipp-spy
        this._ipp = new IPP_Printer({ name: this._printer.name, port: this._printer.port, zeroconf: !!this._printer.zero });
        this._ipp.on('job', job => VirtualPrinter.accept(this._printer, this._spool, job));
    }
}

const printer = new VirtualPrinter();
printer.start().catch(e => {
    console.log(e.message);
    process.exit(1);
});
