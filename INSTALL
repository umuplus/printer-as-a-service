#!/usr/bin/env node

'use strict';

require('dotenv').config();

const Installer = require('./lib/installer');
const mongoose = require('./models');

let allocate = 0;
const messages = [
    [ 'repositories', 'updating...', 'updated' ],
    [ 'os essentials', 'installing...', 'installed' ],
    [ 'database', 'installing...', 'installed' ],
    [ 'nodejs', 'installing...', 'installed' ],
    [ 'nodejs modules', 'installing...', 'installed' ],
    [ 'startup', 'configuring...', 'configured' ],
    [ 'application', 'extracting...', 'extracted' ],
    [ 'dependencies', 'installing...', 'installed' ],
    [ 'environment', 'configuring...', 'configured' ],
    [ 'services', 'deploying...', 'deployed' ],
    [ 'settings', 'configuring...', 'configured' ]
];
for (let m of messages) if (m[0].length > allocate) allocate = m[0].length;

let stop = false;
const _progress = require('cli-progress');
const bar = new _progress.Bar({ format: '{title} | {bar} | {percentage}% | {message}', hideCursor: true });

async function step(i) {
    const title = Installer.justify(messages[i][0], allocate);
    try {
        bar.update(i * 2, { title, message: messages[i][1] });
        await Installer.delay(1000);
        await Installer[`step${ i }`]();
        bar.update(i * 2 + 1, { title, message: messages[i][2] });
        await Installer.delay();
    } catch (e) {
        bar.update(i * 2 + 1, { title, message: e.stderr || e.message });
        stop = true;
    }
}

const limit = 11;
async function start() {
    bar.start(limit * 2, 0, { title: Installer.justify('installer', allocate), message: 'getting ready...' });
    await Installer.delay(1000);
    for (let i = 0 ; i < limit ; i++) {
        await step(i);
        if (stop) break;
    }
    if (!stop) bar.update(limit * 2, { title: Installer.justify('installer', allocate), message: 'done' });
    bar.stop();
    mongoose.connection.close();
}
start().catch(e => {
    console.log(e);
    mongoose.connection.close();
});
