#!/usr/bin/env node

'use strict';

require('dotenv').config();

const is = require('is_js');
const mongoose = require('../models');
const qoa = require('qoa');

const UserModel = mongoose.model('User');

const fields = [
    { type: 'input', query: 'Full Name:', handle: 'name' },
    { type: 'input', query: 'Username:', handle: 'username' },
    { type: 'secure', query: 'Password:', handle: 'password' },
    { type: 'secure', query: 'Password (Again):', handle: 'passphrase' },
    { type: 'interactive', query: 'Access Level:', handle: 'level', symbol: '>', menu: [ 'ADMINISTRATOR', 'MASTER', 'USER' ] }
];
const values = {};

qoa.prompt(fields)
    .then(data => {
        Object.assign(values, data);
        if (is.empty(values.name)) throw new Error('invalid name');
        if (is.not.string(values.username) || is.empty(values.username)) throw new Error('invalid username');
        if (is.empty(values.password) || values.password !== values.passphrase)
            throw new Error('invalid password');
        return values;
    })
    .then(() => {
        return upsertUser(values.name, values.username, values.password, values.level);
    })
    .then(key => {
        console.log(key);
    })
    .catch(e => {
        console.log(e.message);
    })
    .finally(() => mongoose.connection.close());

async function upsertUser(name, username, password, level) {
    let user = new UserModel({ name, username, password });
    user.updatePassword(password);
    if (is.number(UserModel[`_${ level }`])) user.level = UserModel[`_${ level }`];
    await user.save();
    return user;
}
